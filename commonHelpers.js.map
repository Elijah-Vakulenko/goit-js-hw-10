{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nlet userSelectedDate = [0];\n\nconst startBtn = document.querySelector(\"button[data-start]\");\n\n\nconst options = {\n  dateFormat: \"Y-m-d H:i\",\n  altInput: true,\n  altFormat: \"F j, Y (h:i K)\",\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    \n    const selectedDate = selectedDates[0];\n    \n    if (selectedDate < new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      startBtn.disabled = true;\n    } else {\n      userSelectedDate = selectedDate; \n      startBtn.disabled = false; \n    }\n  },\n}\n\nconst input = flatpickr(\"input#datetime-picker\", options);\nclass Timer {\n   start(selectedDate) {\n    const intervalId = setInterval(() => {\n      const currentTime = new Date();\n      const ms = selectedDate - currentTime;\n      const { days, hours, minutes, seconds } = convertMs(ms);\n      updateTimer(days, hours, minutes, seconds);\n      \n    \n      if (ms <= 0) {\n        clearInterval(intervalId);\n      }\n    }, 1000);\n  }\n}\n\n\nconst timer = new Timer();\n\nconst timerFields = {\n  days: document.querySelector(\"[data-days]\"),\n  hours: document.querySelector(\"[data-hours]\"),\n  minutes: document.querySelector(\"[data-minutes]\"),\n  seconds: document.querySelector(\"[data-seconds]\"),\n};\n\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTimer(days, hours, minutes, seconds) {\n  timerFields.days.textContent = addLeadingZero(days);\n  timerFields.hours.textContent = addLeadingZero(hours);\n  timerFields.minutes.textContent = addLeadingZero(minutes);\n  timerFields.seconds.textContent = addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nstartBtn.addEventListener('click', () => timer.start(userSelectedDate)); \n\n\n"],"names":["userSelectedDate","startBtn","options","selectedDates","selectedDate","iziToast","flatpickr","Timer","intervalId","ms","days","hours","minutes","seconds","convertMs","updateTimer","timer","timerFields","addLeadingZero","value"],"mappings":"+IAOA,IAAIA,EAAmB,CAAC,CAAC,EAEzB,MAAMC,EAAW,SAAS,cAAc,oBAAoB,EAGtDC,EAAU,CACd,WAAY,YACZ,SAAU,GACV,UAAW,iBACX,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAErB,MAAMC,EAAeD,EAAc,CAAC,EAEhCC,EAAe,IAAI,MACrBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDJ,EAAS,SAAW,KAEpBD,EAAmBI,EACnBH,EAAS,SAAW,GAEvB,CACH,EAEcK,EAAU,wBAAyBJ,CAAO,EACxD,MAAMK,CAAM,CACT,MAAMH,EAAc,CACnB,MAAMI,EAAa,YAAY,IAAM,CAEnC,MAAMC,EAAKL,EADS,IAAI,KAElB,CAAE,KAAAM,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAE,EACtDM,EAAYL,EAAMC,EAAOC,EAASC,CAAO,EAGrCJ,GAAM,GACR,cAAcD,CAAU,CAE3B,EAAE,GAAI,CACR,CACH,CAGA,MAAMQ,EAAQ,IAAIT,EAEZU,EAAc,CAClB,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CAClD,EAGA,SAASH,EAAUL,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASE,EAAYL,EAAMC,EAAOC,EAASC,EAAS,CAClDI,EAAY,KAAK,YAAcC,EAAeR,CAAI,EAClDO,EAAY,MAAM,YAAcC,EAAeP,CAAK,EACpDM,EAAY,QAAQ,YAAcC,EAAeN,CAAO,EACxDK,EAAY,QAAQ,YAAcC,EAAeL,CAAO,CAC1D,CAEA,SAASK,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEAlB,EAAS,iBAAiB,QAAS,IAAMe,EAAM,MAAMhB,CAAgB,CAAC"}